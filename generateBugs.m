function [FMt, tt, g] = generateBugs(set,trEff,fmLim,NSamples,mod,simNoise)

    NSubjects = set.id(end);
    NMeasurements = numel(set.FMt);
    NChains = 1;
    NBurnin  = 100;
    doparallel = 0;
    gp = mod.gp.*normcdf(fmLim,mod.alpham,1./sqrt(mod.alphap));
    gp = gp./(repmat(sum(gp,1),5,1));
    
    dataStruct = struct('y', set.FMt, ...
        'trGr', set.trGr,...
        'trEff', trEff,...
        'fmLim', 66,...
        'NSubjects', NSubjects,...
        'NMeasurements', NMeasurements,...
        't', set.tt,...
        'id',set.id,...
        'tStart',set.tStart,...
        'alpham', mod.alpham,...
        'alphap', mod.alphap,...
        'r', mod.r,...
        'yp', mod.yp,...
        'gp', mod.gp,...
        'tau', mod.tau,...
        'NPostSamp',size(mod.r,2),...
        'simMeasNoise',simNoise==1|simNoise==3,...
        'simTreatNoise',simNoise==2|simNoise==3);
    
    init0(1:NChains) = struct('alphaL', cell(1, 1), 'g', cell(1, 1));
    for i=1:NChains
        init0(i).alphaL = 0.5*ones(NSubjects,1);
        init0(i).g = round(size(mod.r,1)*rand(NSubjects,1)+0.5);
    end;  

    [samples, ~, ~] = matjags( ...
    dataStruct, ...                     % Observed data   
    fullfile(pwd, 'proportionalRecoveryGeneration.txt'), ...    % File that contains model definition
    init0, ...                          % Initial values for latent variables
    'doparallel' , doparallel, ...      % Parallelization flag
    'nchains', NChains,...              % Number of MCMC chains
    'nburnin', NBurnin,...              % Number of burnin steps
    'nsamples', NSamples, ...           % Number of samples to extract
    'thin', 1, ...                      % Thinning parameter
    'dic', 0, ...                       % Do the DIC?
    'monitorparams', {'y','g','t'}, ...   % List of latent variables to monitor
    'savejagsoutput' , 1 , ...          % Save command line output produced by JAGS?
    'verbosity' , 0 , ...               % 0=do not produce any output; 1=minimal text output; 2=maximum text output
    'cleanup' , 1);                    % clean up of temporary files?

    FMt = squeeze(samples.y)';
    tt = squeeze(samples.t)';
    g = squeeze(samples.g)';
end